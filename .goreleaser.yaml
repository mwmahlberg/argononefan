# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com

# The lines below are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj

version: 2

before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy
    # you may remove this if you don't need go generate
    - go generate ./...

builds:
  - main: ./cmd/argononefan/
    env:
      - CGO_ENABLED=0
    goos:
      - linux
    goarch:
      - arm64

archives:
  - formats: [tar.gz]
    # this name template makes the OS and Arch compatible with the results of `uname`.
    ids:
      - argononefan
    name_template: >-
      {{ .ProjectName }}_
      {{- .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}

changelog:
  disable: false
  use: git
  sort: asc
  filters:
    exclude:
      - "^docs:"
      - "^test:"

nfpms:
  # note that this is an array of nfpm configs
  - #
    # ID of the nfpm config, must be unique.
    #
    # Default: 'default'.
    id: argononefan

    # Name of the package.
    #
    # Default: ProjectName.
    # Templates: allowed.
    package_name: argononefan

    # You can change the file name of the package.
    #
    # Default: '{{ .PackageName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ with .Arm }}v{{ . }}{{ end }}{{ with .Mips }}_{{ . }}{{ end }}{{ if not (eq .Amd64 "v1") }}{{ .Amd64 }}{{ end }}'.
    # Templates: allowed.
    file_name_template: "{{ .ConventionalFileName }}"

    # IDs of the builds which should be archived in this package.
    #
    # Since: v2.8 (use 'builds' in previous versions).
    # Default: empty (include all).
    # ids:
    #   - argononefan
    #   - bar

    # Allows to further filter the artifacts.
    #
    # Artifacts that do not match this expression will be ignored.
    #
    # This feature is only available in GoReleaser Pro..
    # Since: v2.4.
    # Templates: allowed.
    # if: '{{ eq .Os "linux" }}'

    # Your app's vendor.
    vendor: github.com/mwmahlberg

    # Your app's homepage.
    #
    # Default: inferred from global metadata.
    homepage: https://github.com/mwmahlberg/argononefan

    # Your app's maintainer (probably you).
    #
    # Default: inferred from global metadata.
    maintainer: Markus Mahlberg <138420+mwmahlberg@users.noreply.github.com>

    # Your app's description.
    #
    # Default: inferred from global metadata.
    description: |-
      ArgonOne fan control daemon and cli tools.

    # Your app's license.
    #
    # Default: inferred from global metadata.
    license: Apache 2.0

    # Formats to be generated.
    formats:
      - rpm
      # - apk
      # - deb
      # - rpm
      # - termux.deb
      # - archlinux

    # Umask to be used on files without explicit mode set. (overridable)
    #
    # Default: 0o002 (will remove world-writable permissions).
    umask: 0o002

    # Packages your package depends on. (overridable)
    # dependencies:
    #   - git
    #   - zsh

    # Packages it provides. (overridable)
    provides:
      - argononefan

    # Packages your package recommends installing. (overridable)
    # recommends:
    #   - bzr
    #   - gtk

    # Packages your package suggests installing. (overridable)
    # suggests:
    #   - cvs
    #   - ksh

    # Packages that conflict with your package. (overridable)
    # conflicts:
    #   - svn
    #   - bash

    # Packages it replaces. (overridable)
    # replaces:
    #   - fish

    # Path that the binaries should be installed.
    #
    # Default: '/usr/bin'.
    bindir: /usr/sbin

    # Paths to the directories where to put specific types of libraries that
    # GoReleaser built.
    #
    # This should be used together with `builds.buildmode`
    #
    # Templates: allowed.
    # libdirs:
    #   # Default: '/usr/include'.
    #   headers: /usr/include/something

    #   # Default: '/usr/lib'.
    #   cshared: /usr/lib/foo

    #   # Default: '/usr/lib'.
    #   carchive: /usr/lib/foobar

    # Version Epoch.
    #
    # Default: extracted from `version` if it is semver compatible.
    epoch: "2"

    # Version Prerelease.
    #
    # Default: extracted from `version` if it is semver compatible.
    # prerelease: beta1

    # Version Metadata (previously deb.metadata).
    # Setting metadata might interfere with version comparisons depending on the
    # packager.
    #
    # Default: extracted from `version` if it is semver compatible.
    version_metadata: git

    # Version Release.
    release: "1"

    # Section.
    section: default

    # Priority.
    priority: extra

    # Makes a meta package - an empty package that contains only supporting
    # files and dependencies.
    # When set to `true`, the `builds` option is ignored.
    # meta: true

    # Changelog YAML file, see: https://github.com/goreleaser/chglog
    #
    # You can use goreleaser/chglog to create the changelog for your project,
    # pass that changelog yaml file to GoReleaser,
    # and it should in turn setup it accordingly for the given available
    # formats (deb and rpm at the moment).
    #
    # Experimental.
    # changelog: ./foo.yml

    # Contents to add to the package.
    # GoReleaser will automatically add the binaries.
    contents:
      #   # Basic file that applies to all packagers
      #   - src: path/to/foo
      #     dst: /usr/bin/foo

      #   # This will add all files in some/directory or in subdirectories at the
      #   # same level under the directory /etc. This means the tree structure in
      #   # some/directory will not be replicated.
      #   - src: some/directory/
      #     dst: /etc

      #   # This will replicate the directory structure under some/directory at
      #   # /etc, using the "tree" type.
      #   #
      #   # Templates: allowed.
      #   - src: some/directory/
      #     dst: /etc
      #     type: tree
      #     file_info:
      #       # File mode.
      #       mode: 0644
      #       # Modification time.
      #       #
      #       # Templates: allowed (since v2.6).
      #       mtime: "{{.CommitDate}}"

      #       # Owner name.
      #       #
      #       # Templates: allowed (since v2.6).
      #       owner: notRoot

      #       # Group name.
      #       #
      #       # Templates: allowed (since v2.6).
      #       group: notRoot

      #   # Simple config file
      #   - src: path/to/foo.conf
      #     dst: /etc/foo.conf
      #     type: config

      #   # Simple symlink.
      #   # Corresponds to `ln -s /sbin/foo /usr/local/bin/foo`
      #   - src: /sbin/foo
      #     dst: /usr/bin/foo
      #     type: "symlink"

      #   # Corresponds to `%config(noreplace)` if the packager is rpm, otherwise it
      #   # is just a config file
      #   - src: path/to/local/bar.conf
      #     dst: /etc/bar.conf
      #     type: "config|noreplace"

      #   # The src and dst attributes also supports name templates
      #   - src: path/{{ .Os }}-{{ .Arch }}/bar.conf
      #     dst: /etc/foo/bar-{{ .ProjectName }}.conf

      # Additional templated contents to add to the archive.
      # Those files will have their contents pass through the template engine,
      # and its results will be added to the package.
      #
      # This feature is only available in GoReleaser Pro.
      # Templates: allowed.
      # templated_contents:
      #   # a more complete example, check the globbing deep dive below
      #   - src: "LICENSE.md.tpl"
      #     dst: LICENSE.md

      # These files are not actually present in the package, but the file names
      # are added to the package header. From the RPM directives documentation:
      #
      # "There are times when a file should be owned by the package but not
      # installed - log files and state files are good examples of cases you
      # might desire this to happen."
      #
      # "The way to achieve this, is to use the %ghost directive. By adding this
      # directive to the line containing a file, RPM will know about the ghosted
      # file, but will not add it to the package."
      #
      # For non rpm packages ghost files are ignored at this time.
      # - dst: /etc/casper.conf
      #   type: ghost
      # - dst: /var/log/boo.log
      #   type: ghost

      - src: rpm/sysconfig
        dst: /etc/sysconfig/argononefan
        packager: rpm
        type: "config|noreplace"
      - src: rpm/argononefan.service
        dst: /usr/lib/systemd/system/argononefan.service
        packager: rpm

    #   # You can use the packager field to add files that are unique to a
    #   # specific packager
    #   - src: path/to/rpm/file.conf
    #     dst: /etc/file.conf
    #     type: "config|noreplace"
    #     packager: rpm
    #   - src: path/to/deb/file.conf
    #     dst: /etc/file.conf
    #     type: "config|noreplace"
    #     packager: deb
    #   - src: path/to/apk/file.conf
    #     dst: /etc/file.conf
    #     type: "config|noreplace"
    #     packager: apk

    #   # Sometimes it is important to be able to set the mtime, mode, owner, or
    #   # group for a file that differs from what is on the local build system at
    #   # build time.
    #   - src: path/to/foo
    #     dst: /usr/local/foo
    #     file_info:
    #       # File mode.
    #       mode: 0644
    #       # Modification time.
    #       #
    #       # Templates: allowed (since v2.6).
    #       mtime: "{{.CommitDate}}"

    #       # Owner name.
    #       #
    #       # Templates: allowed (since v2.6).
    #       owner: notRoot

    #       # Group name.
    #       #
    #       # Templates: allowed (since v2.6).
    #       group: notRoot

    #   # If `dst` ends with a `/`, it'll create the given path and copy the given
    #   # `src` into it, the same way `cp` works with and without trailing `/`.
    #   - src: ./foo/bar/*
    #     dst: /usr/local/myapp/

    # Using the type 'dir', empty directories can be created. When building
    # RPMs, however, this type has another important purpose: Claiming
    # ownership of that directory. This is important because when upgrading or
    # removing an RPM package, only the directories for which it has claimed
    # ownership are removed. However, you should not claim ownership of a
    # directory that is created by the OS or a dependency of your package.
    #
    # A directory in the build environment can optionally be provided in the
    # 'src' field in order copy mtime and mode from that directory without
    # having to specify it manually.
    # - dst: /some/dir
    #   type: dir
    #   file_info:
    #     mode: 0700

    # Scripts to execute during the installation of the package. (overridable)
    #
    # Keys are the possible targets during the installation process
    # Values are the paths to the scripts which will be executed.
    #
    # Templates: allowed.
    # scripts:
    #   preinstall: "scripts/preinstall.sh"
    #   postinstall: "scripts/postinstall.sh"
    #   preremove: "scripts/preremove.sh"
    #   postremove: "scripts/postremove.sh"

    # Templated scripts to execute during the installation of the package. (overridable)
    #
    # Keys are the possible targets during the installation process
    # Values are the paths to the scripts which will be executed.
    #
    # This feature is only available in GoReleaser Pro.
    # Templates: allowed.
    # templated_scripts:
    #   preinstall: "scripts/preinstall.sh"
    #   postinstall: "scripts/postinstall.sh"
    #   preremove: "scripts/preremove.sh"
    #   postremove: "scripts/postremove.sh"

    # Date to be used as mtime for the package itself, and its internal files.
    # You may also want to set the mtime on its contents.
    #
    # Since: v2.6.
    # Templates: allowed.
    mtime: "{{ .CommitDate }}"

    # All fields above marked as `overridable` can be overridden for a given
    # package format in this section.
    # overrides:
      # The dependencies override can for example be used to provide version
      # constraints for dependencies where  different package formats use
      # different versions or for dependencies that are named differently.
      # deb:
      #   dependencies:
      #     - baz (>= 1.2.3-0)
      #     - some-lib-dev
      #   # ...
      # rpm:
      #   dependencies:
      #     - baz >= 1.2.3-0
      #     - some-lib-devel
      #   # ...
      # apk:
      #   # ...

    # Custom configuration applied only to the RPM packager.
    rpm:
      # RPM specific scripts.
      # scripts:
        # The pretrans script runs before all RPM package transactions / stages.
        # pretrans: ./scripts/pretrans.sh
        # # The posttrans script runs after all RPM package transactions / stages.
        # posttrans: ./scripts/posttrans.sh

      # The package summary.
      #
      # Default: first line of the description.
      summary: ArgonOne fan control daemon and cli tools.

      # The package group.
      # This option is deprecated by most distros but required by old distros
      # like CentOS 5 / EL 5 and earlier.
      group: Unspecified

      # The packager is used to identify the organization that actually packaged
      # the software, as opposed to the author of the software.
      # `maintainer` will be used as fallback if not specified.
      # This will expand any env var you set in the field, eg packager: ${PACKAGER}
      packager: Markus Mahlberg <138420+mwmahlberg@users.noreply.github.com>

      # Compression algorithm (gzip (default), lzma or xz).
      compression: gzip

      # Prefixes for relocatable packages.
      prefixes:
        - /usr/bin

      # The package is signed if a key_file is set
      # signature:
      #   # PGP secret key file path (can also be ASCII-armored).
      #   #
      #   # See "Signing key passphrases" below for more information.
      #   #
      #   # Templates: allowed.
      #   key_file: "{{ .Env.GPG_KEY_PATH }}"



release:
  footer: >-

    ---

    Released by [GoReleaser](https://github.com/goreleaser/goreleaser).
